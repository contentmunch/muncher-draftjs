"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CodeView = void 0;

var _react = _interopRequireDefault(require("react"));

require("codemirror/lib/codemirror.css");

require("codemirror/mode/htmlembedded/htmlembedded");

require("codemirror/addon/hint/show-hint");

require("codemirror/addon/hint/html-hint");

require("codemirror/addon/hint/show-hint.css");

require("codemirror/addon/edit/closebrackets");

require("codemirror/addon/edit/closetag");

require("codemirror/addon/fold/foldcode");

require("codemirror/addon/fold/foldgutter");

require("codemirror/addon/fold/brace-fold");

require("codemirror/addon/fold/comment-fold");

require("codemirror/addon/fold/foldgutter.css");

var _reactCodemirror = require("react-codemirror2");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CodeView = function CodeView(_ref) {
  var html = _ref.html,
      setHtml = _ref.setHtml;
  return /*#__PURE__*/_react.default.createElement(_reactCodemirror.Controlled, {
    onBeforeChange: function onBeforeChange(editor, data, codeMirrorValue) {
      return setHtml(codeMirrorValue);
    },
    options: {
      mode: "htmlembedded",
      lineWrapping: true,
      smartIndent: true,
      lineNumbers: true,
      foldGutter: true,
      gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"],
      autoCloseTags: true,
      matchBrackets: true,
      autoCloseBrackets: true,
      extraKeys: {
        "Ctrl-Space": "autocomplete"
      }
    },
    value: html
  });
};

exports.CodeView = CodeView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy92aWV3L2NvZGUvQ29kZVZpZXcudHN4Il0sIm5hbWVzIjpbIkNvZGVWaWV3IiwiaHRtbCIsInNldEh0bWwiLCJlZGl0b3IiLCJkYXRhIiwiY29kZU1pcnJvclZhbHVlIiwibW9kZSIsImxpbmVXcmFwcGluZyIsInNtYXJ0SW5kZW50IiwibGluZU51bWJlcnMiLCJmb2xkR3V0dGVyIiwiZ3V0dGVycyIsImF1dG9DbG9zZVRhZ3MiLCJtYXRjaEJyYWNrZXRzIiwiYXV0b0Nsb3NlQnJhY2tldHMiLCJleHRyYUtleXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVPLElBQU1BLFFBQWlDLEdBQUcsU0FBcENBLFFBQW9DLE9BQXFCO0FBQUEsTUFBbkJDLElBQW1CLFFBQW5CQSxJQUFtQjtBQUFBLE1BQWJDLE9BQWEsUUFBYkEsT0FBYTtBQUNsRSxzQkFDSSw2QkFBQywyQkFBRDtBQUNJLElBQUEsY0FBYyxFQUFFLHdCQUFDQyxNQUFELEVBQVNDLElBQVQsRUFBZUMsZUFBZjtBQUFBLGFBQ1pILE9BQU8sQ0FBQ0csZUFBRCxDQURLO0FBQUEsS0FEcEI7QUFLSSxJQUFBLE9BQU8sRUFBRTtBQUNMQyxNQUFBQSxJQUFJLEVBQUUsY0FERDtBQUVMQyxNQUFBQSxZQUFZLEVBQUUsSUFGVDtBQUdMQyxNQUFBQSxXQUFXLEVBQUUsSUFIUjtBQUlMQyxNQUFBQSxXQUFXLEVBQUUsSUFKUjtBQUtMQyxNQUFBQSxVQUFVLEVBQUUsSUFMUDtBQU1MQyxNQUFBQSxPQUFPLEVBQUUsQ0FBQyx3QkFBRCxFQUEyQix1QkFBM0IsQ0FOSjtBQU9MQyxNQUFBQSxhQUFhLEVBQUUsSUFQVjtBQVFMQyxNQUFBQSxhQUFhLEVBQUUsSUFSVjtBQVNMQyxNQUFBQSxpQkFBaUIsRUFBRSxJQVRkO0FBVUxDLE1BQUFBLFNBQVMsRUFBRTtBQUNQLHNCQUFjO0FBRFA7QUFWTixLQUxiO0FBbUJJLElBQUEsS0FBSyxFQUFFZDtBQW5CWCxJQURKO0FBd0JILENBekJNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0ICdjb2RlbWlycm9yL2xpYi9jb2RlbWlycm9yLmNzcyc7XG5pbXBvcnQgXCJjb2RlbWlycm9yL21vZGUvaHRtbGVtYmVkZGVkL2h0bWxlbWJlZGRlZFwiO1xuaW1wb3J0IFwiY29kZW1pcnJvci9hZGRvbi9oaW50L3Nob3ctaGludFwiO1xuaW1wb3J0IFwiY29kZW1pcnJvci9hZGRvbi9oaW50L2h0bWwtaGludFwiO1xuaW1wb3J0IFwiY29kZW1pcnJvci9hZGRvbi9oaW50L3Nob3ctaGludC5jc3NcIjtcbmltcG9ydCBcImNvZGVtaXJyb3IvYWRkb24vZWRpdC9jbG9zZWJyYWNrZXRzXCI7XG5pbXBvcnQgXCJjb2RlbWlycm9yL2FkZG9uL2VkaXQvY2xvc2V0YWdcIjtcbmltcG9ydCBcImNvZGVtaXJyb3IvYWRkb24vZm9sZC9mb2xkY29kZVwiO1xuaW1wb3J0IFwiY29kZW1pcnJvci9hZGRvbi9mb2xkL2ZvbGRndXR0ZXJcIjtcbmltcG9ydCBcImNvZGVtaXJyb3IvYWRkb24vZm9sZC9icmFjZS1mb2xkXCI7XG5pbXBvcnQgXCJjb2RlbWlycm9yL2FkZG9uL2ZvbGQvY29tbWVudC1mb2xkXCI7XG5pbXBvcnQgXCJjb2RlbWlycm9yL2FkZG9uL2ZvbGQvZm9sZGd1dHRlci5jc3NcIjtcbmltcG9ydCB7Q29udHJvbGxlZCBhcyBDb2RlTWlycm9yfSBmcm9tIFwicmVhY3QtY29kZW1pcnJvcjJcIjtcblxuZXhwb3J0IGNvbnN0IENvZGVWaWV3OiBSZWFjdC5GQzxDb2RlVmlld1Byb3BzPiA9ICh7aHRtbCwgc2V0SHRtbH0pID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8Q29kZU1pcnJvclxuICAgICAgICAgICAgb25CZWZvcmVDaGFuZ2U9eyhlZGl0b3IsIGRhdGEsIGNvZGVNaXJyb3JWYWx1ZSkgPT5cbiAgICAgICAgICAgICAgICBzZXRIdG1sKGNvZGVNaXJyb3JWYWx1ZSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3B0aW9ucz17e1xuICAgICAgICAgICAgICAgIG1vZGU6IFwiaHRtbGVtYmVkZGVkXCIsXG4gICAgICAgICAgICAgICAgbGluZVdyYXBwaW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNtYXJ0SW5kZW50OiB0cnVlLFxuICAgICAgICAgICAgICAgIGxpbmVOdW1iZXJzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGZvbGRHdXR0ZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgZ3V0dGVyczogW1wiQ29kZU1pcnJvci1saW5lbnVtYmVyc1wiLCBcIkNvZGVNaXJyb3ItZm9sZGd1dHRlclwiXSxcbiAgICAgICAgICAgICAgICBhdXRvQ2xvc2VUYWdzOiB0cnVlLFxuICAgICAgICAgICAgICAgIG1hdGNoQnJhY2tldHM6IHRydWUsXG4gICAgICAgICAgICAgICAgYXV0b0Nsb3NlQnJhY2tldHM6IHRydWUsXG4gICAgICAgICAgICAgICAgZXh0cmFLZXlzOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiQ3RybC1TcGFjZVwiOiBcImF1dG9jb21wbGV0ZVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIHZhbHVlPXtodG1sfVxuICAgICAgICAvPlxuXG4gICAgKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb2RlVmlld1Byb3BzIHtcbiAgICBodG1sOiBzdHJpbmc7XG4gICAgc2V0SHRtbDogKGh0bWw6IHN0cmluZykgPT4gdm9pZDtcbn0iXX0=